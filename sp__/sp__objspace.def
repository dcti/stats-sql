#!/usr/local/bin/sqsh -i

\set procedure=sp__objspace2
use sybsystemprocs
go

print "Creating procedure $procedure"
go
if object_id("$procedure") is not NULL
begin
	drop procedure $procedure
end
go
create procedure $procedure
(	@objname varchar(92) = null  /* the object we want size on */
)
as
	-- $Id: sp__objspace.def,v 1.4 2002/06/10 05:26:13 decibel Exp $
	/*
	** Procname:  sp__objspace.sql
	** Purpose :  Expanced version of sp_spaceused
	** Systems :  System 10, 11 (maybe 4.x)
	*/

	declare @id              int         /* the object id of @objname      */
	declare @type            smallint    /* the object type                */
	declare @sysstat         smallint    /* internal status info           */
	declare @db_sz_mb   int         /* database size Mb               */ 
	declare @message         char(76)    /* message buffer                 */
	declare @datal_message   varchar(80) /* message buffer                 */
	declare @unalloc         int         /* unallocated space of db in kb  */
	declare @unalloc_datalog int         /* unallocated data and log space */
	declare @reserved        int         /* reserved space                 */


	/*
	** 1) Error checking
	*/

	if (@objname != null)
	begin

		/* 1a) Local object w/ unqualified name */
		if ( (@objname like "%.%.%") and (substring(@objname, 1, charindex(".", @objname) - 1) != db_name()) )
		begin
			print "*******************************************************"
			print "*                                                     *"
			print "*    The specified object should be unqualified by    *"
			print "* database name, please specify simple object names   *"
			print "*  change database to the required one with 'use db'  *"
			print "*            and reissue the command                  *"
			print "*        'exec sp__objspace [object_name]'.           *"
			print "*                                                     *"
			print "*******************************************************"    
			return(-1)
		end	/* endif- Local object w/ unqualified name */

  		/* 1b) Try to find the object & see if it's a external table */
		select @id = id, @type = sysstat & 7, @sysstat = sysstat & 2048
		from sysobjects
		where id = object_id(@objname)
		if (@sysstat != 0)
		begin
			print "*******************************************************"
			print "*                                                     *"
			print "*    The specified object is an external table.       *"
			print "*  sp__objspace can only be used on internal tables.  *"
			print "*                                                     *"
			print "*******************************************************"    
			return(-2)
		end

		/* 1c) Does the object exist? */
		if (@id = null)
		begin
			print "*******************************************************"
			print "*                                                     *"
			print "*    The specified object is not an internal table    *"
			print "*             in the current database,                *"
			print "*    or it is not owned by you, check ownership with  *"
			print "*    sp_help and qualify table name with the tables   *"
			print "*         owner e.g.  sp__objspace 'fred.table'.      *"
			print "*                                                     *"
			print "*******************************************************"    
			return(-3)
		end

		/* 1d) See if it's an object that takes up data space */
		/*     types are:                                     */
		/*         0 - trigger                                */
		/*         1 - system table                           */
		/*         2 - view                                   */
		/*         3 - user table                             */
		/*         4 - sproc                                  */
		/*         6 - default                                */
		/*         7 - rule                                   */
		if not exists (select * from sysindexes where @id = id and indid < 2)
 		begin
			if (@type in (0, 4, 6, 7))
			begin
				print "*******************************************************"
				print "*                                                     *"
				print "*   The specified object is not an internal table,    *"
				print "* it is a trigger, stored procedure, rule or default. *"
				print "*           It is stored in sysprocedures.            *"
				print "*   sp__objspace can only be used on internal tables. *"
				print "*                                                     *"
				print "*******************************************************"    
				return(-4)
			end	/* endif- object is 0, 4, 6, 7 */

			if (@type = 2)
			begin
				print "*******************************************************"
				print "*                                                     *"
				print "*    The specified object is not an internal table,   *"
				print "*                    it is a view.                    *"
				print "*       It is does not have space allocated           *"
				print "*  sp__objspace can only be used on internal tables.  *"
				print "*                                                     *"
				print "*******************************************************"    
				return(-5)
			end	/* endif- object is 2 */
		end	

	end	/* endif- object != null */



	/*
	** 2) Gather info about devices
	*/
	set nocount on
	if (@id = null)
	begin

		/* 2.1) Create a translation table for device_types */
		create table #device_types
		(	cntrltype  smallint    not null,
			name       char(4)     not null
		)
		insert into #device_types values (0, "disk")

		/* 2.2) Create a table to hold info about the db devices */
		create table #db_devices
		(	name          varchar(26)   not null,
  			type          varchar(7)    null,
  			usage         varchar(16)   null,
  			function      varchar(12)   null,   
  			dev_sz_mb     smallint      not null, 
  			vdevno        char(5)       not null,
  			vstart        int           not null
		)

		insert into #db_devices
		(	  name
			, type
			, usage
			, function
			, dev_sz_mb
			, vdevno
			, vstart
		) 
		select
		  	  name      = d.name
			, type      = dt.name
			, usage     = v2.name
			, function  = v4.name
			, dev_sz_mb = (u.size * v1.low) / 1048576
			, vdevno    = convert(char(5), convert(tinyint, substring(convert(binary(4), d.low), v3.low, 1)))
			, u.vstart
		from
		  	  master.dbo.sysusages  u
			, master.dbo.sysdevices d
			, master.dbo.spt_values v1
			, master.dbo.spt_values v2
			, master.dbo.spt_values v3
			, master.dbo.spt_values v4
			, #device_types         dt
		where
  			    ((u.vstart > d.low-1) and (u.vstart < d.high+1))  /* Join: sysusages <-> sysdevices   */
			and d.cntrltype *= dt.cntrltype                       /* Join: Translate cntrltype        */
			and d.status    *= v2.number                          /* Join: Translate device status    */
			and u.segmap    *= v4.number                          /* Join: Translate sysusages segmap */
		    and u.dbid       = db_id()                /* Qualifier: Devices for this db only          */
			and d.cntrltype  < 2                      /* Qualifier: No dump devices                   */
			and (v1.number = 1) and (v1.type   = "E") /* Qualifier: spt_values: pg -> mb conversion factor */
			and (v2.type = "V") and (v2.number > -1)  /* Qualifier: spt_values: sysdevices statuses   */
			and (v3.type = "E") and (v3.number = 3)   /* Qualifier: spt_values: which bit is the vdevno */
			and (v4.type = "S")                       /* Qualifier: spt_values: sysusages segmap      */


		/* 2.3) Calc the space (in Mb) for data */
		select @db_sz_mb = sum(d.dev_sz_mb)
  		from   #db_devices d
  		where  d.function like "data%"


		/*
		** 3) Report: Device Allocation
		*/

		set nocount on
		select @message = "The current database is "
			+ db_name()
			+ " with "
			+ convert(varchar, sum(dev_sz_mb))
		from #db_devices

		print "********************************************************************************"
		print "*                                                                              *"
		print "* %1! *", @message
		print "* This allocation is distributed on the following devices:                     *"
		print "*                                                                              *"
		print "********************************************************************************"

		select name, type, usage, function, dev_sz_mb "size_mb", vdevno
		from #db_devices


		/*
		** 4) Gather tbl allocation info
		*/
		create table #tables
		(	table_name  varchar(20)  not null,
			no_rows     int          not null,
			reserved    int          not null,
			data        int          not null,
			index_size  int          null,
			unused      int          not null
		)

  		/* 4a) Collect Information for ALL Tables Except syslogs */
  		insert into #tables
		(	  table_name
			, no_rows
			, reserved
			, data
			, index_size
			, unused
		)
  		select distinct
			  name        = o.name
			, no_rows     = sum(rowcnt(i.doampg))
			, reserved    = ((sum(reserved_pgs(i.id,i.doampg) / 1024) + (sum(reserved_pgs(i.id,i.ioampg) / 1024))) * d.low)
			, data        = (sum(data_pgs(i.id,i.doampg) / 1024) * d.low)
			, index_size  = (sum(data_pgs(i.id,i.ioampg) / 1024) * d.low)
			, unused      = (((sum(reserved_pgs(i.id,i.doampg) / 1024) + sum(reserved_pgs(i.id,i.ioampg) / 1024)) - (sum(data_pgs(i.id,i.doampg) / 1024) + sum(data_pgs(i.id,i.ioampg) / 1024))) * d.low)
  		from
			  sysindexes i
			, master.dbo.spt_values d
			, sysobjects o
  		where
			    d.number            = 1
  			and d.type              = "E"
  			and i.id               != 8
  			and (o.sysstat & 2048)  = 0
  			and o.id                = i.id
  		group by
			  o.id
  		having
			    d.number            = 1
  			and d.type              = "E"
  			and i.id               != 8
  			and (o.sysstat & 2048)  = 0
  			and o.id                = i.id
 
  		/* 4b) Collect Information for syslogs Table */
  		insert into #tables
		(	  table_name
			, no_rows
			, reserved
			, data
			, index_size
			, unused
		)
  		select
			  name        = o.name
         	, no_rows     = 0
         	, reserved    = (reserved_pgs(i.id,i.doampg) * d.low) / 1024
         	, data        = (data_pgs(i.id,i.doampg) * d.low) / 1024
         	, index_size  = 0
         	, unused      = ((reserved_pgs(i.id,i.doampg) - data_pgs(i.id,i.doampg)) * d.low) / 1024
  		from
			  sysindexes i
			, master.dbo.spt_values d
			, sysobjects o
  		where
			    d.number           = 1
  			and d.type             = "E"
  			and i.id               = 8
  			and (o.sysstat & 2048) = 0
  			and o.id               = i.id
 
  		/*
		** 5a) Report:  All tbls' allocations
  		*/
  		select
			  Table_Name = table_name
         	, "Rows"     = right(space(10) + convert(varchar(10), no_rows), 10)
         	, Reserved   = right(space(10) + convert(varchar(10),reserved)   + " Kb", 10)
         	, Data       = right(space(10) + convert(varchar(10),data)       + " Kb", 10)
         	, Index_Size = right(space(10) + convert(varchar(10),index_size) + " Kb", 10)
         	, Unused     = right(space(10) + convert(varchar(10),unused)     + " Kb", 10)
  		from
			#tables
  		order by
			1

  		/*
		** 5b) Report:  Sum of all tbls
  		*/
  		select
			  " Totals                    "
			, Reserved   = right(space(10) + convert(varchar(10), (sum(reserved)/1024))   + " Mb", 10)
			, Data       = right(space(10) + convert(varchar(10), (sum(data)/1024))       + " Mb", 10)
			, Index_Size = right(space(10) + convert(varchar(10), (sum(index_size)/1024)) + " Mb", 10)
			, Unused     = right(space(10) + convert(varchar(10), (sum(unused)/1024))     + " Mb", 10)
		from
			#tables



		/*
		** 6) Available space left msg
		*/
		print " "  /* Linefeed */
		if not exists (select *  from #db_devices where function = "data and log")
		begin 
			select @reserved = sum(reserved) / 1024 from #tables where table_name != "syslogs"
  			select @unalloc  = @db_sz_mb - @reserved
			select @message  = "There are " + convert(varchar, @unalloc) + " out of "
		                       + convert(varchar, @db_sz_mb) + " Mb unallocated data-only space."
    		print @message
		end
		else
		begin
			select @unalloc_datalog = @db_sz_mb - @reserved from #db_devices
			select @datal_message = "There are " + convert(varchar, @unalloc_datalog) + " out of " 
		                        	+ convert(varchar, @db_sz_mb)
		                        	+ " Mb unallocated shared data-and-log space."
			print @datal_message
		end
	end	/* enf-if no object specified */
else
begin
	/* ******************************************************************** */
	/*                 We want a specific object                            */
	/* ******************************************************************** */
  if @id = 8  /* syslogs - special case */
  begin
    select name       = substring(o.name, 1, 20),
           no_rows       = convert(char(11), "Not avail."),
           reserved   = substring(convert(varchar(11),
                        (reserved_pgs(i.id, i.doampg) * d.low) / 1024) 
                        + " " + "Kb", 1, 10),
           data       = substring(convert(varchar(11),
                        ((data_pgs(i.id, i.doampg) * d.low) / 1024)) 
                        + " " + "Kb", 1, 10),
           index_size = substring(convert(varchar(11), 0) 
                        + " " + "Kb", 1, 10),
           unused = substring(convert(varchar(11),
                        (((reserved_pgs(i.id, i.doampg) +
                           reserved_pgs(i.id, i.ioampg)) -
                          (data_pgs(i.id, i.doampg) +
                           data_pgs(i.id, i.ioampg))) 
                         * d.low) / 1024) + " " + "Kb", 1, 10)
    from sysobjects o, sysindexes i, master.dbo.spt_values d
    where i.id      = @id
      and o.id      = @id
      and d.number  = 1
      and d.type    = "E"
  end
  else
  begin
    create table #tab_inf (table_name  varchar(20),
                           type        char(1),
                           no_rows        int,
                           reserved    int,
                           data        int,
                           index_size  int            null,
                           unused      int)

    /* ******************************** */
    /* Non-Index Data Space Information */
    /* ******************************** */
    insert into #tab_inf (table_name,type,no_rows,reserved,data,index_size,unused)
    select name        = substring(i.name, 1, 20),
           type        = "D",
           no_rows        = rowcnt(i.doampg),
           reserved    = ((reserved_pgs(i.id,i.doampg) +
                           reserved_pgs(i.id,i.ioampg)) * d.low) / 1024,
           data        = (data_pgs(i.id,i.doampg) * d.low) / 1024,
           index_size  = 0,
           unused      = (((reserved_pgs(i.id,i.doampg)  +
                            reserved_pgs(i.id,i.ioampg)) -
                           (data_pgs(i.id,i.doampg)      +
                            data_pgs(i.id,i.ioampg)))    * d.low) / 1024
    from sysindexes i, master.dbo.spt_values d,  sysobjects o
    where i.indid             = 0
      and d.number            = 1
      and d.type              = "E"
      and (o.sysstat & 2048)  = 0
      and o.id                = i.id
      and o.id                = @id
 
    /* ********************************* */
    /* Clustered Index Space Information */
    /* ********************************* */
    insert into #tab_inf (table_name,type,no_rows,reserved,data,index_size,unused)
    select table_name  =  substring(i.name, 1, 20) ,
           type        = "C",
           no_rows        = rowcnt(i.doampg),
           reserved    = ((reserved_pgs(i.id,i.doampg) +
                           reserved_pgs(i.id,i.ioampg)) * d.low) / 1024,
           data        = (data_pgs(i.id,i.doampg) * d.low) / 1024,
           index_size  = (data_pgs(i.id,i.ioampg) * d.low) / 1024,
           unused      = (((reserved_pgs(i.id,i.doampg)  +
                            reserved_pgs(i.id,i.ioampg)) -
                           (data_pgs(i.id,i.doampg)      +
                            data_pgs(i.id,i.ioampg)))    * d.low) / 1024
    from sysobjects o, sysindexes i, master.dbo.spt_values d
    where i.indid  = 1
      and d.number = 1
      and d.type   = "E"
      and o.id     = i.id
      and o.id     = @id
    
    /* ******************************* */
    /* Non-clustered Index Information */
    /* ******************************* */
    insert into #tab_inf (table_name,type,no_rows,reserved,data,index_size,unused)
    select table_name =  substring(i.name, 1, 20) ,
           type = "N",
           no_rows        = rowcnt(i.doampg),
           reserved    = ((reserved_pgs(i.id,i.doampg) +
                           reserved_pgs(i.id,i.ioampg)) * d.low) / 1024,
           data        = (data_pgs(i.id,i.doampg) * d.low) / 1024,
           index_size  = (data_pgs(i.id,i.ioampg) * d.low) / 1024,
           unused      = (((reserved_pgs(i.id,i.doampg)  +
                            reserved_pgs(i.id,i.ioampg)) -
                           (data_pgs(i.id,i.doampg)      +
                            data_pgs(i.id,i.ioampg)))    * d.low) / 1024
    from sysobjects o, sysindexes i, master.dbo.spt_values d
    where i.indid  > 1
      and i.indid  < 255
      and d.number = 1
      and d.type   = "E"
      and o.id     = i.id
      and (o.sysstat & 2048) = 0
      and o.id     = @id

    /* ********************* */
    /* Text Data Information */
    /* ********************* */
    insert into #tab_inf (table_name,type,no_rows,reserved,data,index_size,unused)
    select table_name =  substring(i.name, 1, 20) ,
           type = "T",
           no_rows        = rowcnt(i.doampg),
           reserved    = ((reserved_pgs(i.id,i.doampg) +
                           reserved_pgs(i.id,i.ioampg)) * d.low) / 1024,
           data        = (data_pgs(i.id,i.doampg) * d.low) / 1024,
           index_size  = (data_pgs(i.id,i.ioampg) * d.low) / 1024,
           unused      = (((reserved_pgs(i.id,i.doampg)  +
                            reserved_pgs(i.id,i.ioampg)) -
                           (data_pgs(i.id,i.doampg)      +
                            data_pgs(i.id,i.ioampg)))    * d.low) / 1024
    from sysobjects o, sysindexes i, master.dbo.spt_values d
    where i.indid  = 255
      and d.number = 1
      and d.type   = "E"
      and o.id     = i.id
      and (o.sysstat & 2048) = 0
      and o.id     = @id

  set nocount on

  print ""
  print " Space Breakdown for Specific Object "
  print ""
  print "       Index field (I) Values are: "
  print "               D = Table Data Where No Clustered Index "
  print "               C = Table and Index Data Where Clustered Index Exists "
  print "               N = Index Data for Nonclustered Indexes "
  print "               T = Text Data "
  print ""
                
  select 
     Table_Index = table_name,
     I = type,
     "Rows"     = right(space(9)  + substring(convert(varchar(9),no_rows),1,9),9),
     Reserved   = right(space(12) + substring(convert(varchar(12),reserved)
			+ " " + "Kb",1,12),12),
     Data       = right(space(12) + substring(convert(varchar(12),data) 
			+ " " + "Kb",1,12),12),
     Index_Size = right(space(12) + substring(convert(varchar(12),index_size) 
			+ " " + "Kb",1,12),12),
     Unused     = right(space(10) + substring(convert(varchar(10),unused) 
			+ " " + "Kb",1,10),10)
   from #tab_inf

  select 
    " Totals                       ",
    Reserved   = right(space(12) + substring(convert(varchar(12),sum(reserved)) 
                           + " " + "Kb",1,12),12),
    Data       = right(space(12) + substring(convert(varchar(12),sum(data)) 
                           + " " + "Kb",1,12),12),
    Index_Size = right(space(12) + substring(convert(varchar(12),sum(index_size)) 
                           + " " + "Kb",1,12),12),
    Unused     = right(space(10) + substring(convert(varchar(10),sum(unused)) 
                           + " " + "Kb",1,10),10)
  from #tab_inf

  end
end
return
go

grant execute on $procedure to public
go 
