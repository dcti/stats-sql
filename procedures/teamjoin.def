-- $Id: teamjoin.def,v 1.6 2000/08/22 11:17:39 decibel Exp $

\set procedure=p_teamjoin

if ( "${1}" = "" )
begin
	print "Database not specified! Using 'stats' as default!"
	use stats
end
go
if ( "${1}" != "" )
begin
	use ${1}
end
go

if (object_id("$procedure") is not null)
begin
        print "Dropping procedure $procedure"
        drop procedure $procedure
end
go

\echo "Creating procedure $procedure"
create procedure $procedure
(
	@id int = 0,		/* Participant ID */
	@team int = null	/* Team to join */
)
as

	/* Error checking */
	if @id = 0
	begin
		raiserror 99999 "participant ID not specified"
		return -5
	end

	if @team = null
	begin
		raiserror 99999 "team ID not specified"
		return -5
	end

	if @team != 0
		if not exists (select team from Stats_Team where team = @team) 
		begin
			raiserror 99998 "invalid team specified"
			return -6
		end

	/* Grab just the date portion of today */
	declare @today smalldatetime
	select @today = getdate()
	exec sp__date_only @today output
	declare @yesterday smalldatetime
	select @yesterday = dateadd(day, -1, @today)

	/* If the participant already has a record for today, nuke it */
	delete jcn_Team_Joins2
	where ID = @id
		and JOIN_DATE = @today

	/* If the person was on the same team yesterday, update that record
		instead of adding a new one */
	if @team = (
		select TEAM_ID
		from jcn_team_joins2
		where ID = @id
			and ( LAST_DATE = null or LAST_DATE = @yesterday )
	)
	begin
		update jcn_team_joins2
			set LAST_DATE = null,
				LEAVE_TEAM_ID = 0
		where ID = @id
			and ( LAST_DATE = null or LAST_DATE = @yesterday )
	end
	else
	begin
		/* Update the entry for the previous team, if there is one */
		update jcn_Team_Joins2
			set LAST_DATE = @yesterday,
				LEAVE_TEAM_ID = @team
		where ID = @id
			and ( LAST_DATE = null or LAST_DATE = @yesterday )
		-- note that there should always be 1 or 0 records where LAST_DATE = null
		-- for a given participant
	
		/* Insert a new record, unless we're joining 'team 0' */
		if @team != 0
		begin
			insert jcn_Team_Joins2 (ID, TEAM_ID, JOIN_DATE)
			values (@id, @team, @today )
		end
	end

	/* Update Stats_Participant (redundant info; should eventually go away) */
	update Stats_Participant
		set team = @team
	where ID = @id

	return

go

grant execute on $procedure to public
go

