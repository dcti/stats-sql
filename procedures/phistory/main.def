-- $Id: main.def,v 1.4 2000/10/18 22:13:18 decibel Exp $

\set procedure=p_phistory

if ( "${1}" = "" )
begin
	print "Database not specified! Using 'stats' as default!"
	use stats
end
go
if ( "${1}" != "" )
begin
	use ${1}
end
go

if (object_id("$procedure") is not null)
begin
        print "Dropping procedure $procedure"
        drop procedure $procedure
end
go

\echo "Creating procedure $procedure"
create procedure $procedure
(
	@project_id tinyint,			/* Project ID */
	@id int = 0,				/* Participant ID */
	@sort_field varchar(30) = "DATE",	/* Field to sort on */
	@sort_dir char(4) = "asc"		/* Sort direction (asc or desc) */
)
as

	/* Error checking */
	if @project_id = 0
	begin
		raiserror 99999 "project ID not specified"
		return -5
	end

	if @id = 0
	begin
		raiserror 99999 "participant ID not specified"
		return -5
	end

	select @sort_field = lower(@sort_field)
	if @sort_field not in ("date", "work_units")
	begin
		raiserror 99999 "invalid sort field specified"
		return -5
	end

	select @sort_dir = lower(@sort_dir)
	if @sort_dir not in ("asc", "desc")
	begin
		raiserror 99999 "invalid sort direction specified"
		return -5
	end
	
	/* Don't hold any locks */
	set transaction isolation level 0

	/* Create a temp table to store info for this person and their retire_to's */
	create table #phistory
	(
		DATE		smalldatetime,
		WORK_UNITS	numeric(20,0)
	)
	insert into #phistory(DATE, WORK_UNITS)
		select DATE, WORK_UNITS
		from Email_Contrib
		where ID = @id and PROJECT_ID = @project_id

	/* Build the cursor */
	declare retires cursor for
		select id
		from STATS_Participant
		where RETIRE_TO = @id

	declare @retired_id int

	open retires

	fetch retires into @retired_id

	while (@@sqlstatus = 0)
	begin
		insert into #phistory(DATE, WORK_UNITS)
			select DATE, WORK_UNITS
			from Email_Contrib
			where ID = @retired_id and PROJECT_ID = @project_id

		fetch retires into @retired_id
	end

	/* If there was an error, die here */
	if (@@sqlstatus = 1) return -101

	close retires
	deallocate cursor retires

	declare @scale numeric(20,0), @result int, @proc varchar(40)
	select @scale = WORK_UNIT_SCALE
		from Projects
		where PROJECT_ID = @project_id

	select @proc = "${1}_" + @sort_field + "_" + @sort_dir
	if (object_id(@proc) is NULL)
	begin
		raiserror 99999 "Procedure '%1!' does not exist!", @proc
		return -1
	end
	else
	begin
		exec @result = @proc @scale
		return @result
	end
go

grant execute on $procedure to public
go

