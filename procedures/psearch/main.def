# $Id: main.def,v 1.2 2000/01/26 21:24:57 bwilson Exp $

use stats
go

\set procedure=p_psearch

print 'Creating procedure $procedure'
go
if object_id('$procedure') is not NULL
begin
	drop procedure $procedure
end
go
create procedure $procedure
	@project		varchar(10) = null,	/* Project to look at */
	@searchtext		varchar(255) = null,	/* Text to search for */
	@maxrows		int = 50,		/* Max rows to return */
	@escapewildcards	bit = 1			/* 1: escape wildcard characters in @searchtext */
as
begin
	set nocount on
	set rowcount 0

	declare @rows		int,
		@pattern	varchar(255),	/* Search pattern to use */
		@procname	varchar(30)	/* Name of the procedure to run */

	/* Error checking */

	/* Make sure all required parameters were specified */
	if ( (@project is null) or (@searchtext is null) )
	begin
		raiserror 99999 "Not enough parameters"
		print "usage:"
		print "	$procedure project, searchtext, maxrows, escapewildcards"
		print "where:"
		print "	project is project to look at"
		print " searchtext is the email to search for"
		print " maxrows is the maximum number of rows to return"
		print " escapewildcards is set to 1 if you want to escape wildcards in searchtext"
		print "		(%, _) [default], or 0 if you do not want to escape them"
		return -5
	end

	/* Don't allow searches on less than three characters */
	if datalength(@searchtext) < 3
	begin
		raiserror 99999 "Search text is too short"
		print "searchtext must be at least three characters"
		return -5
	end

	/* Build the procedure name */
	select @procname = "$procedure_" + @project

	/* See if the silly procedure exists */
	if (object_id(@procname) is NULL)
	begin
		raiserror 99999 "Procedure '%1!' does not exist!", @procname
		return -1
	end


	create table #psearch
	(
		id	int
	)

	select	@rows = 0

	# See if we should escape the wildcards
	if @escapewildcards = 1
	begin
		p_escape_wildcards @searchtext, @pattern output
	end
	else
	begin
		select @pattern = @searchtext
	end

	# Do the search
	select @pattern = @pattern + '%'

	if charindex('@', @pattern) > 1
	begin
		insert #psearch (id)
			select id
			from STATS_Participant
			where email like @pattern
				and listmode < 10

		select @rows = @@rowcount
	end

	# If we didn't get any rows back (maybe because we didn't even search), search again
	if @rows = 0
	begin
		select @pattern = '%' + @pattern

		insert #psearch
			select id
			from STATS_Participant
			where email like @pattern
				and listmode < 10

		select @rows = @@rowcount
	end

	# Actually execute the procedure
	set rowcount @maxrows
	set nocount off
	exec @procname
	set nocount on
	set rowcount 0

	drop table #psearch

        return
end
go
grant exec on $procedure to public
go
