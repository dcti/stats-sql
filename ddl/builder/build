#!/bin/sh

# Definitions
version='$Id: build,v 1.7 2000/03/31 05:56:57 decibel Exp $'
template="template/"
work="work/"

# Misc variables
buildtable="true"
buildindex="true"
debug="false"
delete="false"
force="false"
sqshargs=""
database=""
tables=""

# Figure out where the template directory is
if [ -d $template ]; then prefix="./"
elif [ -d ../${template} ]; then prefix="../"
elif [ -d ../../${template} ]; then prefix="../../"
else
	echo "Unable to find template directory '$template'!" > /dev/stderr
	exit 1
fi
templatedir=${prefix}${template}
workdir=${prefix}${work}

# Make sure we have a work directory where we expect it to be
if [ ! -d $workdir ]; then mkdir $workdir; fi

# Parse the cowmand-line arguments
while [ x"$1" != x ]; do
	case $1 in
	    -t) buildindex="false"
		shift
		continue;;
	    -i) buildtable="false"
		shift
		continue;;
	-debug) debug="true"
	    	shift
		continue;;
	    -d) delete="true"
		shift
		continue;;
	    -f) force="force"
		shift
		continue;;
	    -o) shift
		sqshoptions="$1"
		shift
		continue;;
	    -v) echo $version
		exit 0 ;;
	    -?) cat << EOF
Usage: build [options] database tables
Options:
  -t		Only build the table (no indexes)
  -i		Only build the indexes
  -d		Delete tables beforehand
  -f		Force (delete even if tables contain data)
  -debug	Debug (build the workfile, but don't attempt to run it)
  -o "options"	Options for sqsh
  -v		Print version information, then exit
EOF
		exit 0 ;;
	     *) database="$1"
		shift
		tables="$@"
		break ;;
	esac
done

if [ x"$database" = x ]; then
	echo "You must specify which database to use."
	exit 1
fi

if [ x"$tables" = x ]; then
	echo "You must specify at least one table or index to build."
	exit 1
fi

tables=`echo $tables | sed -e 's/.def//g' -e 's/.idx//g' | tr -s " " | tr "[:space:]" "\n" | sort | uniq`

# Thanks to linux's stupid idea that bash is a drop-in replacement for sh, we have to do this:
if [ $debug != "true" ]; then
	sqshoptions=`tcsh -c "echo ${sqshoptions}"`
	echo "Using sqsh options: ${sqshoptions}"
fi

# Delete first, if it's called for
if [ $delete = true ]; then
	for table in $tables; do
		# Build the sql file
		workfile="${workdir}${table}.del.sql"

		sed -e "s/@DATABASENAME@/${database}/g" -e "s/@TABLENAME@/${table}/g" ${templatedir}delete.1 > $workfile

		if [ $debug != "true" ]; then
			sqsh $sqshoptions -h -i $workfile
		else
			echo "$workfile built"
		fi
	done
fi

for table in $tables; do
	# Build the table
	if [ $buildtable = true ]; then 
		
		# Make sure the  definition exists
		if [ -f ${table}.def ]; then file=$table.def
		else echo "No table definition for $table" > /dev/stderr; continue;
		fi

		# Build the work-file
		workfile="${workdir}${table}.def.sql"

		sed -e "s/@DATABASENAME@/${database}/g" -e "s/@TABLENAME@/${table}/g" ${templatedir}table.1 > $workfile
		cat ${table}.def >> $workfile
		sed -e "s/@DATABASENAME@/${database}/g" -e "s/@TABLENAME@/${table}/g" ${templatedir}table.2 >> $workfile

		# If there's an '.extra' file, include it.
		if [ -f ${table}.extra ]; then
			sed -e "s/@DATABASENAME@/${database}/g" -e "s/@TABLENAME@/${table}/g" ${templatedir}table.3 >> $workfile
			cat ${table}.extra >> $workfile
			sed -e "s/@DATABASENAME@/${database}/g" -e "s/@TABLENAME@/${table}/g" ${templatedir}table.4 >> $workfile
		fi

		if [ $debug != "true" ]; then
			sqsh $sqshoptions -h -i $workfile
		else
			echo "$workfile built"
		fi

	fi

	# Build the indexes
	if [ $buildindex = true ]; then 
		
		# Make sure the index definition exists
		index=$table
		if [ -f ${index}.idx ]; then file=$index.idx
		else echo "No index definition for $index" > /dev/stderr; continue;
		fi

		# Build the work-file
		workfile="${workdir}${index}.idx.sql"

		sed -e "s/@DATABASENAME@/${database}/g" -e "s/@TABLENAME@/${index}/g" ${templatedir}index.1 > $workfile
		cat ${index}.idx >> $workfile
		sed -e "s/@DATABASENAME@/${database}/g" -e "s/@TABLENAME@/${index}/g" ${templatedir}index.2 >> $workfile
		
		if [ $debug != "true" ]; then
			sqsh $sqshoptions -h -i $workfile
		else
			echo "$workfile built"
		fi

	fi

done
